EABmfForex - Lista de tarefas

========== Tarefas em andamento ==========



========== Novas tarefas ==========

#4 - Testar o EA em todas as contas abertas
     Fazer um teste de execução do EA em todas as contas MetaTrader abertas (Clear, ModalMais, XM, Pepperstone e ICMarkets), e identificar quais ajustes adicionais precisam ser realizados para o EA ser o mais compatível possível pelo menos
     para as contas que foram abertas.
     Solução adotada: foi escolhido os ativos AUDUSD (Forex) e WINM19 (BM&FBovespa), para o período de 01/05/2019 até 31/05/2019, latência aleatória para cada tick, saldo de $ 10.000 e usando as configurações de parâmetros já constantes no
     projeto. Tirando o problema com o invalid stop, todos os ajustes necessários foram realizados e constarão na versão 1.03.

#7 - Entrada errada no início do pregão
     O EA se baseia nos sinais da MA simples de 20 períodos do indicador Tabajara. Ocorre que na abertura do pregão quase sempre temos um gap que gera um sinal errado de compra/venda para o EA, assim gerando um grande prejuízo nas
     primeiras horas do dia. É necessário esperar a formação de algumas barras para se determinar com mais clareza a tendência ou oscilação do mercado.
     A ideia é criar um mecanismo que consiga operar nessas primeiras horas do pregão, evite que o EA se baseie nos sinais do indicador Tabajara, até obter um número razoável de barras (entre 6 e 24 barras).
      
#13 - BUG - abrindo mais de uma posição para o mesmo símbolo
      Analisar o código de verificação de posições e de fechamento porque o EA está permitindo abrir mais de uma posição para o mesmo ativo, tanto de compra quanto de venda.
      
#17 - Delay de acordo com o status do ping do terminal
      Usar as informações contidas nesta página do manual ("https://www.mql5.com/pt/docs/constants/environment_state/terminalstatus") para poder gerar o delay entre as negociações de acordo com o delay do terminal com o servidor de
      negocição da corretora. Assim, o delay fica de acordo com a qualidade da rede a qual o terminal está conectado.
      
#26 - Reversão da tendência
      Ver um indicador que permita identifica quando ocorre uma reversão de uma tendência, ou consiga com o máximo de precisão possível determinar que aquela posição precisa ser fechado em virtude de uma reversão na tendência. O indicador
      mais cotado para isso é o próprio NRTR, pois ele indica sinais de tendência em alta (pontos azuis) e tendência em baixa (pontos vermelhos).      

#27 - Otimizar o EA com o profile
      Os testes com o EA estão demorando muito e consumindo muita memória. Creio que seja por conta da quantidade de cálculo que precisa ver feita para o trailing stop. Rodar o EA em modo profile para identificar quais são os pontos de 
      gargalo. Esse teste é importante para o EA não consumir muita memória e CPU no VPS na Amazon AWS.
      
#28 - Incluir novamente controle de prejuízo máximo
      Para evitar acabar com toda a margem disponível, voltar com o parâmetro para estabelecer o prejuízo máximo permitido para as posições abertas. Tentar determinar quão distante a posição se encontra do seu stop loss: se estiver muito
      distante, fecha logo as posições; caso esteja próximo, deixar alcançar o stop loss. Esse controle só deve ser acionado quando os sinais de tendência indicarem que a posição realmente está contrária a tendência, e não há sinais de 
      imediatos de reversão da tendência.
       
#33 -                   

========== Tarefas concluídas ==========

v1.06:
Liberação: 01/07/2019



v1.05:
Liberação: 16/06/2019

#21 - Exibir detalhes da conta ao carregar
      Exibir todos os detalhes da conta ao carregar o EA. Usar o código já pronto no script SInfoemacoesConta.
      
#22 - Estudo de gerenciamento financeiro
      Implementar as dicas úteis contidas no artigo "https://www.mql5.com/pt/articles/113". A parte de verificação de saldo disponível para abrir a ordem é extremamente importante, e precisa estar na rotina que realiza a abertura de novas
      posições.
      Solução adotada: incluído uma verificação de margem livre antes da abertura de novas posições, conforme orientado no artigo.           

#31 - Implementar o sinal de confirmação
      Usando as ideias do artigo "https://www.mql5.com/pt/articles/136", usar o ADX e médias móveis para obter os sinais de confirmação da tendência para abertura de novas posições.
      Solução adotada: será usado a confirmação de 3 médias móveis. 
      
#32 - Não deixar o stop loss vazio
      Após realizar backtesting com o EA identificou que caso uma posição seja aberta em período de grande agressividade do mercado, pode ocorrer grandes perdas financeiras por conta da auseência de um stop loss. Ver uma rotina que insira
      um ponto de parada para as posições abertas, mesmo que o parâmetro seja setado como zero. Caso o cálculo do stop loss seja automatizado, remover o parâmetro, e também o take profit, que ultimamente está sendo pouco usado.
      Uma alternativa viável é definir o valor da média móvel de 20 ou 50 períodos para a ordem que não tiver stop loss. Identificar quais das duas médias é a menor e atribuir para a ordem.
      Uma segunda alternativa é verificar a perda financeira para as posições sem stop loss. Com o timer posso analisar minuto a minuto as condições da posição, e encerrá-la se ela não for mais favorável. Para esta estratégia preciso de
      um indicador que me diga a pressão de compra/venda do mercado para sinalizar uma possível saída da posição.      
      Solução adotada: foi substituído o sinal de confirmação de média móvel para os sinais de tendência do NRTR. Os problemas com o stop loss zerado foram minimizados consideravelmente.      

v1.04:
Liberação: 13/06/2019

#29 - Mercado a operar
      Remover a definição de horário de operação, e mudar para um parâmetro que defina qual mercado o EA está operando. Mercado BM&FBovespa o horário padrão é de 10h às 17h. Para o mercado Forex, o horário padrão é 01h de segunda até 23h 
      de sexta. Estas definições são para poder aproveitar ao máximo o período aberto dos pregões.      
      
#30 - Obter o tipo de preenchimento do símbolo
      Cada símbolo possui seu tipo de preenchimento (tudo/nada, retornar, tudo/parcial). Remover esse parâmetro do EA e obter esta informação direto do símbolo que o EA está trabalhando.        

v1.03:
Liberação: 09/06/2019

#5 - Corrigir problema com invalid stops
     Para corrigir os erros de invalid stop, estudar a fundo este artigo: "https://www.mql5.com/pt/articles/2555". Neste artigo há dicas valiosas de verificação do ativo antes de permitir operar com o mesmo. Estas verificações complementam
     as verificações da conta.
     Solução adotada: foi usado a minha classe HTrailingStop que já faz algumas verificações citadas no artigo

#8 - Separar as lógicas de nova abertura, trailing stop e checagem de prejuízo
     Atualmente as lógicas para abertura de novas posições, efetuar o trailing stop, e a verificação do prejuízo acumulado estão todas misturadas dentro do mesmo if no método OnTick(). Separar essas lógicas de modo que as três possam
     trabalhar de forma harmônica, sem poluir muito o código.
     
#9 - Separar a lógica de nova abertura de posições
     Baseado nas informações da tarefa #8, colocar a lógica de abertura de posições (verificação de barra, sinal a confirmar) a parte.
     Solução adotada: a lógica de negociação encontra-se no meu próprio método, não poluindo o método OnTick().

#10 - Separar a lógica de trailing stop
      Baseado nas informações da tarefa #8, colocar a lógica de trailing stop separada do método OnTick().
      Solução adotada: foi usada a minha classe HTrailingStop, e o NRTR para realizar o stop móvel.

#11 - Separar a lógica de cálculo de lucro/prejuízo
      Baseado nas informações da tarefa #8, colocar a lógica de verificação de lucro/prejuízo separado do método OnTick().
      Solução adotada: a lógica do cálculo do lucro foi desmembrada e foi incluído no método OnTimer() uma notificação do lucro obtido com todas as posições abertas. Em momento posterior será criado uma lógica para determinar o prejuízo
      máximo, junto com uma medida preventiva para evitar estouro da margem.
      
#12 - Estudo de artigo
      Estudar o artigo "https://www.mql5.com/pt/articles/2555" para poder fazer as verificações necessárias ao realizar um trailing stop.      
      Solução adotada: foi usada minha classe HTrailingStop.      

#16 - Envio de notificações via push
      Usar o recurso de notificação via push descrito na seguinte página do manual: "https://www.mql5.com/pt/docs/network/sendnotification". Realizar a notificação push somente de itens que são realmente importantes, como lucro e prejuízo
      máximos atingidos. As informações mais importantes para enviar via push são informações sobre o saldo da conta quando uma posição aberta está preste a zerá-la.

#18 - Reduzir as mensagens de log
      Reduzir o número de mensagens que vai para o log do terminal e também para o log do EA. Os logs que são incluídos no código são interessantes em ambiente de desenvolvimento e testes, mas nem um pouco úteis em ambiente de produção.
      Tentar criar um método onde centralize todas as mensagens do código, e só exiba se o EA estiver em modo debugger.
      Solução adotada: a exibição das mensagens do EA foram redirecionadas para um método que mostra somente quando o terminal está em modo de teste e debug.
      
#19 - Estratégia Tendência MA Longa com rompimento
      Implementar a seguinte estratégia: quando se estiver usando a tendência da MA longa com 15 períodos simples, criar um ponto de saída para as posições lucrativas. Assim que o método para obtenção de sinal é chamado, verifica-se se a
      posição aberta está gerando lucro. Caso esteja, verifica se o close da barra atual é menor que a MA (tendência de alta reverteu) ou é maior que MA (tendência de baixa reverteu). Ao identificar esse rompimento (a MA está servindo de
      linha de suporte/resistência), a posição lucrativa atualmente aberta é fechada, para preservar o lucro obtido até aquele momento, mesmo havendo take profit, stop loss e stop móvel em operação.
      Solução adotada: parametrizar o período e o tipo de suavização da MA para poder trabalhar melhor com o rompimento. Foi parametrizado também o fechamento quando o rompimento ocorrer.      
      
#20 - Reimplementar a classe para trailing stop
      Reimplementar a classe para stop móvel de acordo com o artigo "https://www.mql5.com/pt/articles/134". Desta vez esta classe ficará vinculada ao EA, não sendo compartilhada para outros EAs, e também sem os recursos para trabalhar com
      objetos nos gráficos.      
      Solução adotada: a classe já estava pronta, só precisei usar.      
      
#23 - Implementar o sinal de negociação baseado no indicador Tabajara
      Detalhes de como obter os sinais do indicador, olhar no código fonte do mesmo. O indicador foi implementado por outro desenvolvedor, portanto não posso mudar o nome do arquivo e nem mexer nos créditos. O indicador encontra-se na
      pasta Indicators\Downloads      
      
#24 - Revisar os parâmetros do EA
      Dar uma revisada nos parâmetros do EA para evitar ter uma lista muito extensa de configuração.      
      Solução adotada: somente os parâmetros que são classificados como definitivos estão indo para o set de configurações do EA. Um comentário foi incluído no código para marcar o trecho dos parâmetros defitividos.      
      
#25 - Notificar quando não houver mais margem livre
      Notificar via PUSH (obrigatoriamente) a falta de margem para operar. Útil quando se estiver operando com mais de um gráfico e com um lote alto.      

v1.02:
Liberação: 02/06/2019

#6 - Operar em mais de um gráfico
     Testar e validar a execução do EA em mais de um gráfico, fazendo todos os ajustes necessários para não haver equívocos no fechamento das ordens.     
     
#14 - Introduzir delay entre negociações
      Introduzir um delay entre os envios de ordem de compra e venda, a fim de diminuir a possibilidade de abertura de uma posição sem antes a anterior ter sido fechada.     
      
#15 - Dupla verificação ao abrir novas ordens
      Ao solicitar o fechamento das posições, verificar depois de um certo delay se ainda existe posições abertas. Pode ter ocorrido um erro na operação anterior e se não for verificado uma nova ordem é aberta sem necessidade.      

v1.01:
Liberação: 28/05/2019

#1 - Parametrizar o timeframe do método temNovaBarra()
     Atualmente o método está com um timeframe fixo de M1. Parametrizar este timeframes de modo a poder escolher um mais adequado para o gráfico selecionado.
     Colocar o enum de períodos para o usuário poder selecionar.
     
#2 - Encapsulamento de estratégias
     Encapsular a lógica contida no método sinalNegociacao() em um método em particular, ou até mesmo em uma classe no arquivo HStrategy, e também implementar os sinais de mudança de tendência da MA longa e encapsular em HStrategy. Incluir
     um parâmetro no EA para poder escolher qual estratégia será usada para aquele ativo.     
     
#3 - Obter dinamicamente o tipo de preenchimento da ordem
     Na Bovespa BM&F e no servidor Forex da MetaQuote o ORDER_FILLING_FOK funciona sem problemas. Já na XM, Pepperstore e ICMarkets só aceita o ORDER_FILLING_IOC. Tentar detectar automaticamente o tipo de preenchimento para evitar criar
     mais um parâmetro no EA.
     Solução adotada: incluir um novo parâmetro, pois a mensagem de erro é registrada direto no diário de log do terminal pois é um erro de execução enviado pelo servidor, e não pelo terminal. Para pegar detalhes sobre esse erro preciso
                      abrir o diário e ver qual foi a última mensagem de falha. É impraticável quando tem vários EAs rodando em gráficos diferentes.     